import { useState, useEffect, createContext, useContext } from "react";
import "./App.css";

const WeatherContext = createContext();
const API_KEY = "4c8ebd9fad932b4343acdc6ca78f687c";
const API_URL = "https://api.openweathermap.org/data/2.5/weather";

const WeatherCard = ({ weather }) => (
  <div className="weather-card">
    <h2 className="city-name">{weather.city}</h2>
    <p className="temperature">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <span>{weather.temperature}</span></p>
    <p className="description">–û–ø–∏—Å–∞–Ω–∏–µ: <span>{weather.description}</span></p>
    <p className="wind">–í–µ—Ç–µ—Ä: <span>{weather.wind}</span></p>
  </div>
);

const SidebarLeft = ({ onSelectCity }) => {
  const [city, setCity] = useState("");
  
  const handleSubmit = (e) => {
    e.preventDefault();
    if (city.trim()) {
      onSelectCity(city);
    }
  };

  return (
    <div className="sidebar-left">
      <form onSubmit={handleSubmit} className="search-form">
        <input 
          type="text" 
          value={city} 
          onChange={(e) => setCity(e.target.value)} 
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
          className="search-input"
        />
        <button type="submit" className="search-button">üîç –ò—Å–∫–∞—Ç—å</button>
      </form>
    </div>
  );
};

const SidebarRight = ({ humidity, pressure }) => (
  <div className="sidebar-right">
    <h3>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
    <p>–í–ª–∞–∂–Ω–æ—Å—Ç—å: <span>{humidity}</span></p>
    <p>–î–∞–≤–ª–µ–Ω–∏–µ: <span>{pressure}</span></p>
  </div>
);

const BottomBox = () => (
  <div className="bottom-box">
    <h3>–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–≥–æ–¥–µ</h3>
    <p>–û–¥–µ–≤–∞–π—Ç–µ—Å—å –ø–æ –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º!</p>
  </div>
);

const ForecastBox = ({ forecast }) => (
  <div className="forecast-box">
    <h3>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è</h3>
    <ul>
      {forecast.map((day, index) => (
        <li key={index}>
          <strong>{day.date}</strong>: {day.temp}¬∞C, {day.description}
        </li>
      ))}
    </ul>
  </div>
);

const App = () => {
  const [weather, setWeather] = useState({
    city: "New York",
    temperature: "22¬∞C",
    description: "Sunny",
    wind: "10 km/h",
    humidity: "60%",
    pressure: "1015 hPa",
  });
  const [forecast, setForecast] = useState([]);
  const [loading, setLoading] = useState(false);

  const fetchWeather = async (city) => {
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}?q=${city}&appid=${API_KEY}&units=metric&lang=ru`);
      if (!response.ok) throw new Error("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
      const data = await response.json();
      setWeather({
        city: data.name,
        temperature: `${data.main.temp}¬∞C`,
        description: data.weather[0].description,
        wind: `${data.wind.speed} –º/—Å`,
        humidity: `${data.main.humidity}%`,
        pressure: `${data.main.pressure} hPa`,
      });
      setForecast([
        { date: "–ó–∞–≤—Ç—Ä–∞", temp: data.main.temp - 2, description: "–û–±–ª–∞—á–Ω–æ" },
        { date: "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", temp: data.main.temp - 1, description: "–î–æ–∂–¥—å" },
        { date: "–ß–µ—Ä–µ–∑ 3 –¥–Ω—è", temp: data.main.temp, description: "–°–æ–ª–Ω–µ—á–Ω–æ" }
      ]);
    } catch (error) {
      alert(error.message);
    }
    setLoading(false);
  };

  return (
    <WeatherContext.Provider value={{ weather, handleSelectCity: fetchWeather }}>
      <div className="container">
        <SidebarLeft onSelectCity={fetchWeather} />
        <div className="main-content">
          {loading ? <p>–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</p> : <WeatherCard weather={weather} />}
        </div>
        <SidebarRight humidity={weather.humidity} pressure={weather.pressure} />
        <ForecastBox forecast={forecast} />
        <BottomBox />
      </div>
    </WeatherContext.Provider>
  );
};

export default App;
